#include "Mod.h"

const uint8_t marioTextureHeader[] = 
{
	0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x02, 0x00,
	0x40, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
	0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

std::unique_ptr<uint8_t[]> marioTexture;
size_t marioTextureSize;

void initSM64(const std::string& romFilePath)
{
	// Read the ROM.
	FILE* file = fopen(romFilePath.c_str(), "rb");
	fseek(file, 0, SEEK_END);

	const size_t length = ftell(file);

	std::unique_ptr<uint8_t[]> rom = std::make_unique<uint8_t[]>(length);
	fseek(file, 0, SEEK_SET);
	fread(rom.get(), 1, length, file);

	fclose(file);

	// Initialize libsm64.
	marioTextureSize = sizeof(marioTextureHeader) + SM64_TEXTURE_WIDTH * SM64_TEXTURE_HEIGHT * 4;
	marioTexture = std::make_unique<uint8_t[]>(marioTextureSize);

	sm64_global_init(rom.get(), marioTexture.get() + sizeof(marioTextureHeader), nullptr);
	memcpy(marioTexture.get(), marioTextureHeader, sizeof(marioTextureHeader));

	// Create a dummy surface to prevent crashes. We use ray casts for collision instead.
	SM64Surface surface{};
	surface.vertices[0][0] = -1;
	surface.vertices[0][2] = 1;
	surface.vertices[2][0] = -1;
	surface.vertices[2][2] = -1;
	surface.vertices[1][0] = 1;
	surface.vertices[1][2] = 1;

	sm64_static_surfaces_load(&surface, 1);
}